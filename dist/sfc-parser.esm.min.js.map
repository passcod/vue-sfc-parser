{"version":3,"sources":["../sfc-parser.mjs"],"names":[],"mappings":"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","file":"sfc-parser.esm.min.js","sourcesContent":["export default function parseSfc(str) {\n  const COMMENT = Symbol('comment');\n  const tags = [];\n\n  let partial = '', tag = '', attrs = {}, attr = null, content = '', depth = 0;\n\n  for (const char of str) {\n    // console.error('--(p,t,a,a,c,d,l)--', partial || null, tag || null, attrs, attr, content || null, depth, tags.length);\n\n    if (tag == COMMENT) {\n      if (char == '-') {\n        partial += char;\n      } else if (char == '>' && partial == '--') {\n        partial = '';\n        tag = '';\n        depth -= 1;\n      } else {\n        partial = '';\n      }\n\n      continue;\n    } else if (!tag) {\n      if (!partial) {\n        if (/\\s/.test(char)) continue;\n        if (char == '<') {\n          partial = '<';\n          continue;\n        }\n\n        throw new Error(`Unexpected '${char}', expected whitespace or '<'.`);\n      } else {\n        if (attr) {\n          if (!attr.name) {\n            if (/[a-z0-9-]/i.test(char)) {\n              attr.partial += char;\n              continue;\n            }\n\n            if (char == '=') {\n              attr.name = attr.partial;\n              attr.partial = '';\n              continue;\n            }\n\n            if (/\\s/.test(char)) {\n              if (!attr.partial) continue;\n              attrs[attr.partial] = attr.partial;\n              attr.partial = '';\n              continue;\n            }\n\n            if (char == '>') {\n              if (attr.partial) {\n                attrs[attr.partial] = attr.partial;\n              }\n              attr = null;\n              tag = partial.slice(1);\n              partial = '';\n              depth += 1;\n              continue;\n            }\n\n            throw new Error(`Unexpected '${char}', expected whitespace, attribute name, or '>'.`);\n          } else {\n            if (!attr.partial) {\n              if (char == '>') throw new Error(`Unexpected '>', expected attribute value.`);\n              if (/\\s/.test(char)) continue;\n\n              attr.partial += char;\n              continue;\n            }\n\n            if (\n              (attr.partial.startsWith('\"') && char == '\"') ||\n              (attr.partial.startsWith('\\'') && char == '\\'')\n            ) {\n              if (attr.partial.endsWith('\\\\')) {\n                attr.partial.pop();\n                attr.partial.push(char);\n                continue;\n              }\n\n              attrs[attr.name] = attr.partial.slice(1);\n              attr = null;\n              continue;\n            }\n\n            if (char == '>') {\n              if (attr.partial.startsWith('\"') || attr.partial.startsWith('\\''))\n                throw new Error(`Unexpected end of attribute, expected '${attr.partial[0]}' terminator.`);\n\n              attrs[attr.name] = attr.partial;\n              attr = null;\n              tag = partial.slice(1);\n              partial = '';\n              depth += 1;\n              continue;\n            }\n\n            attr.partial += char;\n            continue;\n          }\n        } else {\n          if (/[a-z0-9-!]/i.test(char)) {\n            partial += char;\n            continue;\n          }\n\n          if (char == '>') {\n            tag = partial.slice(1);\n            partial = '';\n            depth += 1;\n            continue;\n          }\n\n          if (/\\s/.test(char)) {\n            if (partial == '<!--') {\n              tag = COMMENT;\n              partial = '';\n              depth += 1;\n              continue;\n            }\n\n            attr = { partial: '', name: '' };\n            continue;\n          }\n\n          throw new Error(`Unexpected '${char}', expected tag name or '>'.`);\n        }\n      }\n    } else {\n      if (partial) {\n        if (char == '>') {\n          if (partial.startsWith('</') && partial.slice(2) == tag) {\n            depth -= 1;\n            if (depth == 0) {\n              const newtag = { tag, content };\n              if (Object.entries(attrs).length) newtag.attrs = attrs;\n              tags.push(newtag);\n              tag = '';\n              partial = '';\n              attrs = {};\n              content = '';\n              continue;\n            }\n          } else if (partial.slice(1).split(/\\s/, 2)[0] == tag) {\n            depth += 1;\n            content += partial + char;\n            partial = '';\n            continue;\n          }\n\n          content += partial + char;\n          partial = '';\n          continue;\n        }\n\n        partial += char;\n      } else {\n        if (char == '<') {\n          partial = char;\n          continue;\n        }\n\n        content += char;\n      }\n    }\n  }\n\n  if (tag || partial || attr) {\n    throw new Error('Unexpected end of file.');\n  }\n\n  return tags;\n}\n"]}